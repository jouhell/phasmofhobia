{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jou/Escritorio/jouhell/phasmophobia/src/components/list-of-cards.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Card from './card';\nimport styled from 'styled-components';\nimport useTestsContext from '../context';\nimport data from '../../data.json';\nimport { filter, isEqual, map, sortBy, isEmpty, take, uniq } from 'lodash';\nvar Container = styled.div.withConfig({\n  displayName: \"list-of-cards__Container\",\n  componentId: \"d3bqbv-0\"\n})([\"display:flex;overflow:auto;> *{margin-right:24px;}>:last-child{margin-right:0;}\"]);\n_c = Container;\n\nvar ListOfCards = function ListOfCards() {\n  _s();\n\n  var _useTestsContext = useTestsContext(),\n      tests = _useTestsContext.tests;\n\n  var _useState = useState([]),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var ghosts = data.ghosts;\n  useEffect(function () {\n    var testsFilter = filter(tests, function (test) {\n      return !!test;\n    });\n    var testsIds = uniq(map(testsFilter, function (item) {\n      return item.id;\n    }));\n    console.log(testsIds);\n\n    if (isEmpty(testsIds)) {\n      return;\n    }\n\n    var result = filter(ghosts, function (ghost) {\n      var ghostEvidencesIds = take(sortBy(ghost.evidencesId), testsIds.length);\n      return isEqual(ghostEvidencesIds, sortBy(testsIds));\n    });\n    setState(result);\n  }, [tests]);\n  console.log(state);\n  var renderCards = map([0, 1, 2], function (_, index) {\n    return /*#__PURE__*/_jsxDEV(Card, {}, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 52\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: renderCards\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(ListOfCards, \"TXbpKHyl5MQZFlelJIKEKWb4ikM=\", false, function () {\n  return [useTestsContext];\n});\n\n_c2 = ListOfCards;\nexport default ListOfCards;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ListOfCards\");","map":{"version":3,"sources":["/home/jou/Escritorio/jouhell/phasmophobia/src/components/list-of-cards.js"],"names":["React","useEffect","useState","Card","styled","useTestsContext","data","filter","isEqual","map","sortBy","isEmpty","take","uniq","Container","div","ListOfCards","tests","state","setState","ghosts","testsFilter","test","testsIds","item","id","console","log","result","ghost","ghostEvidencesIds","evidencesId","length","renderCards","_","index"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,IAAhD,EAAsDC,IAAtD,QAAkE,QAAlE;AAEA,IAAMC,SAAS,GAAGV,MAAM,CAACW,GAAV;AAAA;AAAA;AAAA,uFAAf;KAAMD,S;;AAaN,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA,yBACNX,eAAe,EADT;AAAA,MAChBY,KADgB,oBAChBA,KADgB;;AAAA,kBAGEf,QAAQ,CAAC,EAAD,CAHV;AAAA,MAGjBgB,KAHiB;AAAA,MAGVC,QAHU;;AAAA,MAKhBC,MALgB,GAKLd,IALK,CAKhBc,MALgB;AAOxBnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,WAAW,GAAGd,MAAM,CAACU,KAAD,EAAQ,UAACK,IAAD;AAAA,aAAU,CAAC,CAACA,IAAZ;AAAA,KAAR,CAA1B;AAEA,QAAMC,QAAQ,GAAGV,IAAI,CAACJ,GAAG,CAACY,WAAD,EAAc,UAACG,IAAD;AAAA,aAAUA,IAAI,CAACC,EAAf;AAAA,KAAd,CAAJ,CAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AAEA,QAAIZ,OAAO,CAACY,QAAD,CAAX,EAAuB;AACrB;AACD;;AAED,QAAMK,MAAM,GAAGrB,MAAM,CAACa,MAAD,EAAS,UAACS,KAAD,EAAW;AACvC,UAAMC,iBAAiB,GAAGlB,IAAI,CAACF,MAAM,CAACmB,KAAK,CAACE,WAAP,CAAP,EAA4BR,QAAQ,CAACS,MAArC,CAA9B;AAEA,aAAOxB,OAAO,CAACsB,iBAAD,EAAoBpB,MAAM,CAACa,QAAD,CAA1B,CAAd;AACD,KAJoB,CAArB;AAMAJ,IAAAA,QAAQ,CAACS,MAAD,CAAR;AACD,GAjBQ,EAiBN,CAACX,KAAD,CAjBM,CAAT;AAmBAS,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AAEA,MAAMe,WAAW,GAAGxB,GAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,UAACyB,CAAD,EAAIC,KAAJ;AAAA,wBAAc,QAAC,IAAD,MAAWA,KAAX;AAAA;AAAA;AAAA;AAAA,aAAd;AAAA,GAAZ,CAAvB;AAEA,sBAAO,QAAC,SAAD;AAAA,cAAYF;AAAZ;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CA/BD;;GAAMjB,W;UACcX,e;;;MADdW,W;AAiCN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Card from './card'\nimport styled from 'styled-components'\nimport useTestsContext from '../context'\nimport data from '../../data.json'\nimport { filter, isEqual, map, sortBy, isEmpty, take, uniq } from 'lodash'\n\nconst Container = styled.div`\n  display: flex;\n  overflow: auto;\n\n  > * {\n    margin-right: 24px;\n  }\n\n  > :last-child {\n    margin-right: 0;\n  }\n`\n\nconst ListOfCards = () => {\n  const { tests } = useTestsContext()\n\n  const [state, setState] = useState([])\n\n  const { ghosts } = data\n\n  useEffect(() => {\n    const testsFilter = filter(tests, (test) => !!test)\n\n    const testsIds = uniq(map(testsFilter, (item) => item.id))\n    console.log(testsIds)\n\n    if (isEmpty(testsIds)) {\n      return\n    }\n\n    const result = filter(ghosts, (ghost) => {\n      const ghostEvidencesIds = take(sortBy(ghost.evidencesId), testsIds.length)\n\n      return isEqual(ghostEvidencesIds, sortBy(testsIds))\n    })\n\n    setState(result)\n  }, [tests])\n\n  console.log(state)\n\n  const renderCards = map([0, 1, 2], (_, index) => <Card key={index} />)\n\n  return <Container>{renderCards}</Container>\n}\n\nexport default ListOfCards\n"]},"metadata":{},"sourceType":"module"}